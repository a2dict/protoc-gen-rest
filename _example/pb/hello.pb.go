// Code generated by protoc-gen-go. DO NOT EDIT.
// source: pb/hello.proto

package pb

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import empty "github.com/golang/protobuf/ptypes/empty"
import _ "google.golang.org/genproto/googleapis/api/annotations"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Request struct {
	Id                   uint32   `protobuf:"varint,1,opt,name=id,proto3" json:"id,omitempty"`
	Name                 string   `protobuf:"bytes,2,opt,name=name,proto3" json:"name,omitempty"`
	Age                  int32    `protobuf:"varint,3,opt,name=age,proto3" json:"age,omitempty"`
	Page                 uint32   `protobuf:"varint,4,opt,name=page,proto3" json:"page,omitempty"`
	Limit                int64    `protobuf:"varint,5,opt,name=limit,proto3" json:"limit,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Request) Reset()         { *m = Request{} }
func (m *Request) String() string { return proto.CompactTextString(m) }
func (*Request) ProtoMessage()    {}
func (*Request) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_0ef52e97a4f53742, []int{0}
}
func (m *Request) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Request.Unmarshal(m, b)
}
func (m *Request) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Request.Marshal(b, m, deterministic)
}
func (dst *Request) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Request.Merge(dst, src)
}
func (m *Request) XXX_Size() int {
	return xxx_messageInfo_Request.Size(m)
}
func (m *Request) XXX_DiscardUnknown() {
	xxx_messageInfo_Request.DiscardUnknown(m)
}

var xxx_messageInfo_Request proto.InternalMessageInfo

func (m *Request) GetId() uint32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *Request) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *Request) GetAge() int32 {
	if m != nil {
		return m.Age
	}
	return 0
}

func (m *Request) GetPage() uint32 {
	if m != nil {
		return m.Page
	}
	return 0
}

func (m *Request) GetLimit() int64 {
	if m != nil {
		return m.Limit
	}
	return 0
}

type Response struct {
	Msg                  string   `protobuf:"bytes,1,opt,name=msg,proto3" json:"msg,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Response) Reset()         { *m = Response{} }
func (m *Response) String() string { return proto.CompactTextString(m) }
func (*Response) ProtoMessage()    {}
func (*Response) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_0ef52e97a4f53742, []int{1}
}
func (m *Response) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Response.Unmarshal(m, b)
}
func (m *Response) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Response.Marshal(b, m, deterministic)
}
func (dst *Response) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Response.Merge(dst, src)
}
func (m *Response) XXX_Size() int {
	return xxx_messageInfo_Response.Size(m)
}
func (m *Response) XXX_DiscardUnknown() {
	xxx_messageInfo_Response.DiscardUnknown(m)
}

var xxx_messageInfo_Response proto.InternalMessageInfo

func (m *Response) GetMsg() string {
	if m != nil {
		return m.Msg
	}
	return ""
}

// Request to create a photo.
type CreatePhotoRequest struct {
	// Required. Photo to create.
	Photo                *Photo   `protobuf:"bytes,1,opt,name=photo,proto3" json:"photo,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *CreatePhotoRequest) Reset()         { *m = CreatePhotoRequest{} }
func (m *CreatePhotoRequest) String() string { return proto.CompactTextString(m) }
func (*CreatePhotoRequest) ProtoMessage()    {}
func (*CreatePhotoRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_0ef52e97a4f53742, []int{2}
}
func (m *CreatePhotoRequest) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_CreatePhotoRequest.Unmarshal(m, b)
}
func (m *CreatePhotoRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_CreatePhotoRequest.Marshal(b, m, deterministic)
}
func (dst *CreatePhotoRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreatePhotoRequest.Merge(dst, src)
}
func (m *CreatePhotoRequest) XXX_Size() int {
	return xxx_messageInfo_CreatePhotoRequest.Size(m)
}
func (m *CreatePhotoRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreatePhotoRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreatePhotoRequest proto.InternalMessageInfo

func (m *CreatePhotoRequest) GetPhoto() *Photo {
	if m != nil {
		return m.Photo
	}
	return nil
}

// Photo is used to store 360 photos along with photo metadata.
type Photo struct {
	// Output only. Identifier for the photo, which is unique among all photos in
	// Google.
	PhotoId *PhotoId `protobuf:"bytes,1,opt,name=photo_id,json=photoId,proto3" json:"photo_id,omitempty"`
	// Required (when creating photo). Input only. The resource URL where the
	// photo bytes are uploaded to.
	UploadReference *UploadRef `protobuf:"bytes,2,opt,name=upload_reference,json=uploadReference,proto3" json:"upload_reference,omitempty"`
	// Output only. The download URL for the photo bytes. This field is set only
	// when the `view` parameter in a `GetPhotoRequest` is set to
	// `INCLUDE_DOWNLOAD_URL`.
	DownloadUrl string `protobuf:"bytes,3,opt,name=download_url,json=downloadUrl,proto3" json:"download_url,omitempty"`
	// Output only. The thumbnail URL for showing a preview of the given photo.
	ThumbnailUrl string `protobuf:"bytes,9,opt,name=thumbnail_url,json=thumbnailUrl,proto3" json:"thumbnail_url,omitempty"`
	// Output only. The share link for the photo.
	ShareLink string `protobuf:"bytes,11,opt,name=share_link,json=shareLink,proto3" json:"share_link,omitempty"`
	// Output only. View count of the photo.
	ViewCount            int64    `protobuf:"varint,10,opt,name=view_count,json=viewCount,proto3" json:"view_count,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *Photo) Reset()         { *m = Photo{} }
func (m *Photo) String() string { return proto.CompactTextString(m) }
func (*Photo) ProtoMessage()    {}
func (*Photo) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_0ef52e97a4f53742, []int{3}
}
func (m *Photo) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_Photo.Unmarshal(m, b)
}
func (m *Photo) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_Photo.Marshal(b, m, deterministic)
}
func (dst *Photo) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Photo.Merge(dst, src)
}
func (m *Photo) XXX_Size() int {
	return xxx_messageInfo_Photo.Size(m)
}
func (m *Photo) XXX_DiscardUnknown() {
	xxx_messageInfo_Photo.DiscardUnknown(m)
}

var xxx_messageInfo_Photo proto.InternalMessageInfo

func (m *Photo) GetPhotoId() *PhotoId {
	if m != nil {
		return m.PhotoId
	}
	return nil
}

func (m *Photo) GetUploadReference() *UploadRef {
	if m != nil {
		return m.UploadReference
	}
	return nil
}

func (m *Photo) GetDownloadUrl() string {
	if m != nil {
		return m.DownloadUrl
	}
	return ""
}

func (m *Photo) GetThumbnailUrl() string {
	if m != nil {
		return m.ThumbnailUrl
	}
	return ""
}

func (m *Photo) GetShareLink() string {
	if m != nil {
		return m.ShareLink
	}
	return ""
}

func (m *Photo) GetViewCount() int64 {
	if m != nil {
		return m.ViewCount
	}
	return 0
}

// Identifier for a photo.
type PhotoId struct {
	// Required. A base64 encoded identifier.
	Id                   string   `protobuf:"bytes,1,opt,name=id,proto3" json:"id,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *PhotoId) Reset()         { *m = PhotoId{} }
func (m *PhotoId) String() string { return proto.CompactTextString(m) }
func (*PhotoId) ProtoMessage()    {}
func (*PhotoId) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_0ef52e97a4f53742, []int{4}
}
func (m *PhotoId) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_PhotoId.Unmarshal(m, b)
}
func (m *PhotoId) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_PhotoId.Marshal(b, m, deterministic)
}
func (dst *PhotoId) XXX_Merge(src proto.Message) {
	xxx_messageInfo_PhotoId.Merge(dst, src)
}
func (m *PhotoId) XXX_Size() int {
	return xxx_messageInfo_PhotoId.Size(m)
}
func (m *PhotoId) XXX_DiscardUnknown() {
	xxx_messageInfo_PhotoId.DiscardUnknown(m)
}

var xxx_messageInfo_PhotoId proto.InternalMessageInfo

func (m *PhotoId) GetId() string {
	if m != nil {
		return m.Id
	}
	return ""
}

// Upload reference for media files.
type UploadRef struct {
	// Required. An upload reference should be unique for each user. It follows
	// the form:
	// "https://streetviewpublish.googleapis.com/media/user/<account_id>/photo/<upload_reference>"
	UploadUrl            string   `protobuf:"bytes,1,opt,name=upload_url,json=uploadUrl,proto3" json:"upload_url,omitempty"`
	XXX_NoUnkeyedLiteral struct{} `json:"-"`
	XXX_unrecognized     []byte   `json:"-"`
	XXX_sizecache        int32    `json:"-"`
}

func (m *UploadRef) Reset()         { *m = UploadRef{} }
func (m *UploadRef) String() string { return proto.CompactTextString(m) }
func (*UploadRef) ProtoMessage()    {}
func (*UploadRef) Descriptor() ([]byte, []int) {
	return fileDescriptor_hello_0ef52e97a4f53742, []int{5}
}
func (m *UploadRef) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_UploadRef.Unmarshal(m, b)
}
func (m *UploadRef) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_UploadRef.Marshal(b, m, deterministic)
}
func (dst *UploadRef) XXX_Merge(src proto.Message) {
	xxx_messageInfo_UploadRef.Merge(dst, src)
}
func (m *UploadRef) XXX_Size() int {
	return xxx_messageInfo_UploadRef.Size(m)
}
func (m *UploadRef) XXX_DiscardUnknown() {
	xxx_messageInfo_UploadRef.DiscardUnknown(m)
}

var xxx_messageInfo_UploadRef proto.InternalMessageInfo

func (m *UploadRef) GetUploadUrl() string {
	if m != nil {
		return m.UploadUrl
	}
	return ""
}

func init() {
	proto.RegisterType((*Request)(nil), "pb.Request")
	proto.RegisterType((*Response)(nil), "pb.Response")
	proto.RegisterType((*CreatePhotoRequest)(nil), "pb.CreatePhotoRequest")
	proto.RegisterType((*Photo)(nil), "pb.Photo")
	proto.RegisterType((*PhotoId)(nil), "pb.PhotoId")
	proto.RegisterType((*UploadRef)(nil), "pb.UploadRef")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// SayClient is the client API for Say service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://godoc.org/google.golang.org/grpc#ClientConn.NewStream.
type SayClient interface {
	Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error)
	// Creates an upload session to start uploading photo data. The upload URL of
	// the returned `UploadRef` is used to upload the data for the photo.
	//
	// After the upload is complete, the `UploadRef` is used with
	// `StreetViewPublishService:CreatePhoto()` to create the `Photo` object
	// entry.
	StartUpload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UploadRef, error)
	// After the client finishes uploading the photo with the returned
	// `UploadRef`, `photo.create` publishes the uploaded photo to Street View on
	// Google Maps.
	//
	// This method returns the following error codes:
	//
	// * `INVALID_ARGUMENT` if the request is malformed.
	// * `NOT_FOUND` if the upload reference does not exist.
	CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*Photo, error)
}

type sayClient struct {
	cc *grpc.ClientConn
}

func NewSayClient(cc *grpc.ClientConn) SayClient {
	return &sayClient{cc}
}

func (c *sayClient) Hello(ctx context.Context, in *Request, opts ...grpc.CallOption) (*Response, error) {
	out := new(Response)
	err := c.cc.Invoke(ctx, "/pb.Say/Hello", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayClient) StartUpload(ctx context.Context, in *empty.Empty, opts ...grpc.CallOption) (*UploadRef, error) {
	out := new(UploadRef)
	err := c.cc.Invoke(ctx, "/pb.Say/StartUpload", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sayClient) CreatePhoto(ctx context.Context, in *CreatePhotoRequest, opts ...grpc.CallOption) (*Photo, error) {
	out := new(Photo)
	err := c.cc.Invoke(ctx, "/pb.Say/CreatePhoto", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SayServer is the server API for Say service.
type SayServer interface {
	Hello(context.Context, *Request) (*Response, error)
	// Creates an upload session to start uploading photo data. The upload URL of
	// the returned `UploadRef` is used to upload the data for the photo.
	//
	// After the upload is complete, the `UploadRef` is used with
	// `StreetViewPublishService:CreatePhoto()` to create the `Photo` object
	// entry.
	StartUpload(context.Context, *empty.Empty) (*UploadRef, error)
	// After the client finishes uploading the photo with the returned
	// `UploadRef`, `photo.create` publishes the uploaded photo to Street View on
	// Google Maps.
	//
	// This method returns the following error codes:
	//
	// * `INVALID_ARGUMENT` if the request is malformed.
	// * `NOT_FOUND` if the upload reference does not exist.
	CreatePhoto(context.Context, *CreatePhotoRequest) (*Photo, error)
}

func RegisterSayServer(s *grpc.Server, srv SayServer) {
	s.RegisterService(&_Say_serviceDesc, srv)
}

func _Say_Hello_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Request)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServer).Hello(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Say/Hello",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServer).Hello(ctx, req.(*Request))
	}
	return interceptor(ctx, in, info, handler)
}

func _Say_StartUpload_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(empty.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServer).StartUpload(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Say/StartUpload",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServer).StartUpload(ctx, req.(*empty.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _Say_CreatePhoto_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreatePhotoRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SayServer).CreatePhoto(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/pb.Say/CreatePhoto",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SayServer).CreatePhoto(ctx, req.(*CreatePhotoRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _Say_serviceDesc = grpc.ServiceDesc{
	ServiceName: "pb.Say",
	HandlerType: (*SayServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Hello",
			Handler:    _Say_Hello_Handler,
		},
		{
			MethodName: "StartUpload",
			Handler:    _Say_StartUpload_Handler,
		},
		{
			MethodName: "CreatePhoto",
			Handler:    _Say_CreatePhoto_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "pb/hello.proto",
}

func init() { proto.RegisterFile("pb/hello.proto", fileDescriptor_hello_0ef52e97a4f53742) }

var fileDescriptor_hello_0ef52e97a4f53742 = []byte{
	// 511 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x64, 0x52, 0xcd, 0x6e, 0x13, 0x3d,
	0x14, 0xd5, 0x24, 0x9d, 0xaf, 0x9d, 0x3b, 0x4d, 0xbf, 0xca, 0x40, 0x35, 0x0c, 0x05, 0x82, 0x91,
	0x50, 0xd4, 0xc5, 0x8c, 0x08, 0x42, 0x42, 0x5d, 0x52, 0x21, 0x01, 0x62, 0x81, 0x5c, 0x85, 0x6d,
	0xe4, 0xe9, 0x38, 0x89, 0xd5, 0x89, 0x6d, 0x3c, 0x9e, 0x56, 0x15, 0x62, 0xc3, 0x2b, 0xf0, 0x68,
	0xbc, 0x02, 0x5b, 0xc4, 0x2b, 0x20, 0x5f, 0xe7, 0xa7, 0x88, 0xdd, 0xbd, 0xe7, 0x1e, 0x1f, 0xdf,
	0x9f, 0x03, 0x07, 0xa6, 0x2a, 0x17, 0xa2, 0x69, 0x74, 0x61, 0xac, 0x76, 0x9a, 0xf4, 0x4c, 0x95,
	0x1f, 0xcf, 0xb5, 0x9e, 0x37, 0xa2, 0xe4, 0x46, 0x96, 0x5c, 0x29, 0xed, 0xb8, 0x93, 0x5a, 0xb5,
	0x81, 0x91, 0x3f, 0x58, 0x55, 0x31, 0xab, 0xba, 0x59, 0x29, 0x96, 0xc6, 0xdd, 0x84, 0x22, 0x95,
	0xb0, 0xcb, 0xc4, 0xe7, 0x4e, 0xb4, 0x8e, 0x1c, 0x40, 0x4f, 0xd6, 0x59, 0x34, 0x8c, 0x46, 0x03,
	0xd6, 0x93, 0x35, 0x21, 0xb0, 0xa3, 0xf8, 0x52, 0x64, 0xbd, 0x61, 0x34, 0x4a, 0x18, 0xc6, 0xe4,
	0x10, 0xfa, 0x7c, 0x2e, 0xb2, 0xfe, 0x30, 0x1a, 0xc5, 0xcc, 0x87, 0x9e, 0x65, 0x3c, 0xb4, 0x83,
	0xef, 0x30, 0x26, 0x77, 0x21, 0x6e, 0xe4, 0x52, 0xba, 0x2c, 0x1e, 0x46, 0xa3, 0x3e, 0x0b, 0x09,
	0x3d, 0x86, 0x3d, 0x26, 0x5a, 0xa3, 0x55, 0x8b, 0x3a, 0xcb, 0x76, 0x8e, 0x9f, 0x25, 0xcc, 0x87,
	0xf4, 0x25, 0x90, 0x33, 0x2b, 0xb8, 0x13, 0x1f, 0x17, 0xda, 0xe9, 0x75, 0x4f, 0x8f, 0x21, 0x36,
	0x3e, 0x47, 0x66, 0x3a, 0x4e, 0x0a, 0x53, 0x15, 0x81, 0x10, 0x70, 0xfa, 0x3b, 0x82, 0x18, 0x01,
	0xf2, 0x0c, 0xf6, 0x10, 0x9a, 0xae, 0x86, 0x48, 0xc7, 0xe9, 0x86, 0xfd, 0xae, 0x66, 0xbb, 0x26,
	0x04, 0xe4, 0x15, 0x1c, 0x76, 0xa6, 0xd1, 0xbc, 0x9e, 0x5a, 0x31, 0x13, 0x56, 0xa8, 0x8b, 0x30,
	0x62, 0x3a, 0x1e, 0x78, 0xfe, 0x04, 0x6b, 0x4c, 0xcc, 0xd8, 0xff, 0xdd, 0x3a, 0x0c, 0x2c, 0xf2,
	0x04, 0xf6, 0x6b, 0x7d, 0xad, 0xf0, 0x6d, 0x67, 0x1b, 0xdc, 0x42, 0xc2, 0xd2, 0x35, 0x36, 0xb1,
	0x0d, 0x79, 0x0a, 0x03, 0xb7, 0xe8, 0x96, 0x95, 0xe2, 0xb2, 0x41, 0x4e, 0x82, 0x9c, 0xfd, 0x0d,
	0xe8, 0x49, 0x0f, 0x01, 0xda, 0x05, 0xb7, 0x62, 0xda, 0x48, 0x75, 0x99, 0xa5, 0xc8, 0x48, 0x10,
	0xf9, 0x20, 0xd5, 0xa5, 0x2f, 0x5f, 0x49, 0x71, 0x3d, 0xbd, 0xd0, 0x9d, 0x72, 0x19, 0xe0, 0x0a,
	0x13, 0x8f, 0x9c, 0x79, 0x80, 0xde, 0x87, 0xdd, 0xd5, 0x4c, 0xb7, 0x2e, 0x96, 0xf8, 0x8b, 0xd1,
	0x13, 0x48, 0x36, 0xed, 0x7b, 0x99, 0xd5, 0x9c, 0xbe, 0x8f, 0x40, 0x4a, 0x02, 0x32, 0xb1, 0xcd,
	0xf8, 0x57, 0x04, 0xfd, 0x73, 0x7e, 0x43, 0x5e, 0x43, 0xfc, 0xd6, 0xdb, 0x89, 0xe0, 0xb6, 0x56,
	0x7b, 0xcf, 0xf7, 0x43, 0x12, 0xae, 0x45, 0x1f, 0x7d, 0xfb, 0xf1, 0xf3, 0x7b, 0x2f, 0xa3, 0x77,
	0xca, 0xb9, 0x15, 0xc2, 0x09, 0x1b, 0x1c, 0x58, 0x7e, 0x91, 0xf5, 0xd7, 0xd3, 0xe8, 0x84, 0x7c,
	0x82, 0xf4, 0xdc, 0x71, 0xeb, 0xc2, 0xe7, 0xe4, 0xa8, 0x08, 0x8e, 0x2b, 0xd6, 0x8e, 0x2b, 0xde,
	0x78, 0xc7, 0xe5, 0x7f, 0xef, 0x97, 0x0e, 0x51, 0x35, 0xa7, 0xf7, 0xca, 0xab, 0xe7, 0x25, 0x5e,
	0xe7, 0xb4, 0xdd, 0xaa, 0x78, 0xdd, 0xf7, 0x90, 0xde, 0xf2, 0x04, 0x39, 0xf2, 0xef, 0xff, 0x35,
	0x49, 0xbe, 0x75, 0x05, 0xcd, 0x50, 0x93, 0xd0, 0x64, 0xab, 0x19, 0x8c, 0x52, 0xfd, 0x87, 0xcd,
	0xbc, 0xf8, 0x13, 0x00, 0x00, 0xff, 0xff, 0x1d, 0xe1, 0xea, 0xae, 0x40, 0x03, 0x00, 0x00,
}
